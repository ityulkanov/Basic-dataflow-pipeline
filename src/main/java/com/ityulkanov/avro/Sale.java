/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.ityulkanov.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Sale extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 3123560794111977538L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sale\",\"namespace\":\"com.ityulkanov.avro\",\"fields\":[{\"name\":\"salesDate\",\"type\":\"string\"},{\"name\":\"storeID\",\"type\":\"string\"},{\"name\":\"productID\",\"type\":\"string\"},{\"name\":\"productName\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"discount\",\"type\":\"double\"},{\"name\":\"updatedPrice\",\"type\":[\"null\",\"double\"]},{\"name\":\"transactionID\",\"type\":[\"null\",\"string\"]}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<Sale> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Sale> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Sale> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Sale> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Sale> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this Sale to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a Sale from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Sale instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Sale fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.lang.CharSequence salesDate;
    private java.lang.CharSequence storeID;
    private java.lang.CharSequence productID;
    private java.lang.CharSequence productName;
    private double price;
    private double discount;
    private java.lang.Double updatedPrice;
    private java.lang.CharSequence transactionID;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Sale() {
    }

    /**
     * All-args constructor.
     *
     * @param salesDate     The new value for salesDate
     * @param storeID       The new value for storeID
     * @param productID     The new value for productID
     * @param productName   The new value for productName
     * @param price         The new value for price
     * @param discount      The new value for discount
     * @param updatedPrice  The new value for updatedPrice
     * @param transactionID The new value for transactionID
     */
    public Sale(java.lang.CharSequence salesDate, java.lang.CharSequence storeID, java.lang.CharSequence productID, java.lang.CharSequence productName, java.lang.Double price, java.lang.Double discount, java.lang.Double updatedPrice, java.lang.CharSequence transactionID) {
        this.salesDate = salesDate;
        this.storeID = storeID;
        this.productID = productID;
        this.productName = productName;
        this.price = price;
        this.discount = discount;
        this.updatedPrice = updatedPrice;
        this.transactionID = transactionID;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return salesDate;
            case 1:
                return storeID;
            case 2:
                return productID;
            case 3:
                return productName;
            case 4:
                return price;
            case 5:
                return discount;
            case 6:
                return updatedPrice;
            case 7:
                return transactionID;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                salesDate = (java.lang.CharSequence) value$;
                break;
            case 1:
                storeID = (java.lang.CharSequence) value$;
                break;
            case 2:
                productID = (java.lang.CharSequence) value$;
                break;
            case 3:
                productName = (java.lang.CharSequence) value$;
                break;
            case 4:
                price = (java.lang.Double) value$;
                break;
            case 5:
                discount = (java.lang.Double) value$;
                break;
            case 6:
                updatedPrice = (java.lang.Double) value$;
                break;
            case 7:
                transactionID = (java.lang.CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'salesDate' field.
     *
     * @return The value of the 'salesDate' field.
     */
    public java.lang.CharSequence getSalesDate() {
        return salesDate;
    }


    /**
     * Sets the value of the 'salesDate' field.
     *
     * @param value the value to set.
     */
    public void setSalesDate(java.lang.CharSequence value) {
        this.salesDate = value;
    }

    /**
     * Gets the value of the 'storeID' field.
     *
     * @return The value of the 'storeID' field.
     */
    public java.lang.CharSequence getStoreID() {
        return storeID;
    }


    /**
     * Sets the value of the 'storeID' field.
     *
     * @param value the value to set.
     */
    public void setStoreID(java.lang.CharSequence value) {
        this.storeID = value;
    }

    /**
     * Gets the value of the 'productID' field.
     *
     * @return The value of the 'productID' field.
     */
    public java.lang.CharSequence getProductID() {
        return productID;
    }


    /**
     * Sets the value of the 'productID' field.
     *
     * @param value the value to set.
     */
    public void setProductID(java.lang.CharSequence value) {
        this.productID = value;
    }

    /**
     * Gets the value of the 'productName' field.
     *
     * @return The value of the 'productName' field.
     */
    public java.lang.CharSequence getProductName() {
        return productName;
    }


    /**
     * Sets the value of the 'productName' field.
     *
     * @param value the value to set.
     */
    public void setProductName(java.lang.CharSequence value) {
        this.productName = value;
    }

    /**
     * Gets the value of the 'price' field.
     *
     * @return The value of the 'price' field.
     */
    public double getPrice() {
        return price;
    }


    /**
     * Sets the value of the 'price' field.
     *
     * @param value the value to set.
     */
    public void setPrice(double value) {
        this.price = value;
    }

    /**
     * Gets the value of the 'discount' field.
     *
     * @return The value of the 'discount' field.
     */
    public double getDiscount() {
        return discount;
    }


    /**
     * Sets the value of the 'discount' field.
     *
     * @param value the value to set.
     */
    public void setDiscount(double value) {
        this.discount = value;
    }

    /**
     * Gets the value of the 'updatedPrice' field.
     *
     * @return The value of the 'updatedPrice' field.
     */
    public java.lang.Double getUpdatedPrice() {
        return updatedPrice;
    }


    /**
     * Sets the value of the 'updatedPrice' field.
     *
     * @param value the value to set.
     */
    public void setUpdatedPrice(java.lang.Double value) {
        this.updatedPrice = value;
    }

    /**
     * Gets the value of the 'transactionID' field.
     *
     * @return The value of the 'transactionID' field.
     */
    public java.lang.CharSequence getTransactionID() {
        return transactionID;
    }


    /**
     * Sets the value of the 'transactionID' field.
     *
     * @param value the value to set.
     */
    public void setTransactionID(java.lang.CharSequence value) {
        this.transactionID = value;
    }

    /**
     * Creates a new Sale RecordBuilder.
     *
     * @return A new Sale RecordBuilder
     */
    public static com.ityulkanov.avro.Sale.Builder newBuilder() {
        return new com.ityulkanov.avro.Sale.Builder();
    }

    /**
     * Creates a new Sale RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new Sale RecordBuilder
     */
    public static com.ityulkanov.avro.Sale.Builder newBuilder(com.ityulkanov.avro.Sale.Builder other) {
        if (other == null) {
            return new com.ityulkanov.avro.Sale.Builder();
        } else {
            return new com.ityulkanov.avro.Sale.Builder(other);
        }
    }

    /**
     * Creates a new Sale RecordBuilder by copying an existing Sale instance.
     *
     * @param other The existing instance to copy.
     * @return A new Sale RecordBuilder
     */
    public static com.ityulkanov.avro.Sale.Builder newBuilder(com.ityulkanov.avro.Sale other) {
        if (other == null) {
            return new com.ityulkanov.avro.Sale.Builder();
        } else {
            return new com.ityulkanov.avro.Sale.Builder(other);
        }
    }

    /**
     * RecordBuilder for Sale instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sale>
            implements org.apache.avro.data.RecordBuilder<Sale> {

        private java.lang.CharSequence salesDate;
        private java.lang.CharSequence storeID;
        private java.lang.CharSequence productID;
        private java.lang.CharSequence productName;
        private double price;
        private double discount;
        private java.lang.Double updatedPrice;
        private java.lang.CharSequence transactionID;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(com.ityulkanov.avro.Sale.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.salesDate)) {
                this.salesDate = data().deepCopy(fields()[0].schema(), other.salesDate);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.storeID)) {
                this.storeID = data().deepCopy(fields()[1].schema(), other.storeID);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.productID)) {
                this.productID = data().deepCopy(fields()[2].schema(), other.productID);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.productName)) {
                this.productName = data().deepCopy(fields()[3].schema(), other.productName);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.price)) {
                this.price = data().deepCopy(fields()[4].schema(), other.price);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.discount)) {
                this.discount = data().deepCopy(fields()[5].schema(), other.discount);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.updatedPrice)) {
                this.updatedPrice = data().deepCopy(fields()[6].schema(), other.updatedPrice);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.transactionID)) {
                this.transactionID = data().deepCopy(fields()[7].schema(), other.transactionID);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
        }

        /**
         * Creates a Builder by copying an existing Sale instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(com.ityulkanov.avro.Sale other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.salesDate)) {
                this.salesDate = data().deepCopy(fields()[0].schema(), other.salesDate);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.storeID)) {
                this.storeID = data().deepCopy(fields()[1].schema(), other.storeID);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.productID)) {
                this.productID = data().deepCopy(fields()[2].schema(), other.productID);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.productName)) {
                this.productName = data().deepCopy(fields()[3].schema(), other.productName);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.price)) {
                this.price = data().deepCopy(fields()[4].schema(), other.price);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.discount)) {
                this.discount = data().deepCopy(fields()[5].schema(), other.discount);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.updatedPrice)) {
                this.updatedPrice = data().deepCopy(fields()[6].schema(), other.updatedPrice);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.transactionID)) {
                this.transactionID = data().deepCopy(fields()[7].schema(), other.transactionID);
                fieldSetFlags()[7] = true;
            }
        }

        /**
         * Gets the value of the 'salesDate' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getSalesDate() {
            return salesDate;
        }


        /**
         * Sets the value of the 'salesDate' field.
         *
         * @param value The value of 'salesDate'.
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder setSalesDate(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.salesDate = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'salesDate' field has been set.
         *
         * @return True if the 'salesDate' field has been set, false otherwise.
         */
        public boolean hasSalesDate() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'salesDate' field.
         *
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder clearSalesDate() {
            salesDate = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'storeID' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getStoreID() {
            return storeID;
        }


        /**
         * Sets the value of the 'storeID' field.
         *
         * @param value The value of 'storeID'.
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder setStoreID(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.storeID = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'storeID' field has been set.
         *
         * @return True if the 'storeID' field has been set, false otherwise.
         */
        public boolean hasStoreID() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'storeID' field.
         *
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder clearStoreID() {
            storeID = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'productID' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getProductID() {
            return productID;
        }


        /**
         * Sets the value of the 'productID' field.
         *
         * @param value The value of 'productID'.
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder setProductID(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.productID = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'productID' field has been set.
         *
         * @return True if the 'productID' field has been set, false otherwise.
         */
        public boolean hasProductID() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'productID' field.
         *
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder clearProductID() {
            productID = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'productName' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getProductName() {
            return productName;
        }


        /**
         * Sets the value of the 'productName' field.
         *
         * @param value The value of 'productName'.
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder setProductName(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.productName = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'productName' field has been set.
         *
         * @return True if the 'productName' field has been set, false otherwise.
         */
        public boolean hasProductName() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'productName' field.
         *
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder clearProductName() {
            productName = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'price' field.
         *
         * @return The value.
         */
        public double getPrice() {
            return price;
        }


        /**
         * Sets the value of the 'price' field.
         *
         * @param value The value of 'price'.
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder setPrice(double value) {
            validate(fields()[4], value);
            this.price = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'price' field has been set.
         *
         * @return True if the 'price' field has been set, false otherwise.
         */
        public boolean hasPrice() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'price' field.
         *
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder clearPrice() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'discount' field.
         *
         * @return The value.
         */
        public double getDiscount() {
            return discount;
        }


        /**
         * Sets the value of the 'discount' field.
         *
         * @param value The value of 'discount'.
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder setDiscount(double value) {
            validate(fields()[5], value);
            this.discount = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'discount' field has been set.
         *
         * @return True if the 'discount' field has been set, false otherwise.
         */
        public boolean hasDiscount() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'discount' field.
         *
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder clearDiscount() {
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'updatedPrice' field.
         *
         * @return The value.
         */
        public java.lang.Double getUpdatedPrice() {
            return updatedPrice;
        }


        /**
         * Sets the value of the 'updatedPrice' field.
         *
         * @param value The value of 'updatedPrice'.
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder setUpdatedPrice(java.lang.Double value) {
            validate(fields()[6], value);
            this.updatedPrice = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'updatedPrice' field has been set.
         *
         * @return True if the 'updatedPrice' field has been set, false otherwise.
         */
        public boolean hasUpdatedPrice() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'updatedPrice' field.
         *
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder clearUpdatedPrice() {
            updatedPrice = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'transactionID' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getTransactionID() {
            return transactionID;
        }


        /**
         * Sets the value of the 'transactionID' field.
         *
         * @param value The value of 'transactionID'.
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder setTransactionID(java.lang.CharSequence value) {
            validate(fields()[7], value);
            this.transactionID = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'transactionID' field has been set.
         *
         * @return True if the 'transactionID' field has been set, false otherwise.
         */
        public boolean hasTransactionID() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'transactionID' field.
         *
         * @return This builder.
         */
        public com.ityulkanov.avro.Sale.Builder clearTransactionID() {
            transactionID = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Sale build() {
            try {
                Sale record = new Sale();
                record.salesDate = fieldSetFlags()[0] ? this.salesDate : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.storeID = fieldSetFlags()[1] ? this.storeID : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.productID = fieldSetFlags()[2] ? this.productID : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.productName = fieldSetFlags()[3] ? this.productName : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.price = fieldSetFlags()[4] ? this.price : (java.lang.Double) defaultValue(fields()[4]);
                record.discount = fieldSetFlags()[5] ? this.discount : (java.lang.Double) defaultValue(fields()[5]);
                record.updatedPrice = fieldSetFlags()[6] ? this.updatedPrice : (java.lang.Double) defaultValue(fields()[6]);
                record.transactionID = fieldSetFlags()[7] ? this.transactionID : (java.lang.CharSequence) defaultValue(fields()[7]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Sale>
            WRITER$ = (org.apache.avro.io.DatumWriter<Sale>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Sale>
            READER$ = (org.apache.avro.io.DatumReader<Sale>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.salesDate);

        out.writeString(this.storeID);

        out.writeString(this.productID);

        out.writeString(this.productName);

        out.writeDouble(this.price);

        out.writeDouble(this.discount);

        if (this.updatedPrice == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeDouble(this.updatedPrice);
        }

        if (this.transactionID == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.transactionID);
        }

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.salesDate = in.readString(this.salesDate instanceof Utf8 ? (Utf8) this.salesDate : null);

            this.storeID = in.readString(this.storeID instanceof Utf8 ? (Utf8) this.storeID : null);

            this.productID = in.readString(this.productID instanceof Utf8 ? (Utf8) this.productID : null);

            this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8) this.productName : null);

            this.price = in.readDouble();

            this.discount = in.readDouble();

            if (in.readIndex() != 1) {
                in.readNull();
                this.updatedPrice = null;
            } else {
                this.updatedPrice = in.readDouble();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.transactionID = null;
            } else {
                this.transactionID = in.readString(this.transactionID instanceof Utf8 ? (Utf8) this.transactionID : null);
            }

        } else {
            for (int i = 0; i < 8; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.salesDate = in.readString(this.salesDate instanceof Utf8 ? (Utf8) this.salesDate : null);
                        break;

                    case 1:
                        this.storeID = in.readString(this.storeID instanceof Utf8 ? (Utf8) this.storeID : null);
                        break;

                    case 2:
                        this.productID = in.readString(this.productID instanceof Utf8 ? (Utf8) this.productID : null);
                        break;

                    case 3:
                        this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8) this.productName : null);
                        break;

                    case 4:
                        this.price = in.readDouble();
                        break;

                    case 5:
                        this.discount = in.readDouble();
                        break;

                    case 6:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.updatedPrice = null;
                        } else {
                            this.updatedPrice = in.readDouble();
                        }
                        break;

                    case 7:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.transactionID = null;
                        } else {
                            this.transactionID = in.readString(this.transactionID instanceof Utf8 ? (Utf8) this.transactionID : null);
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










